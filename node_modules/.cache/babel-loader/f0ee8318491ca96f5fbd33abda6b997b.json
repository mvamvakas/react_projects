{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Michael Vamvakas\\\\Desktop\\\\GIT\\\\HCIFinalProject\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Michael Vamvakas\\\\Desktop\\\\GIT\\\\HCIFinalProject\\\\src\\\\pages\\\\HelloWorldPage\\\\HelloWorld.jsx\";\nimport React from \"react\";\nimport \"./HelloWorld.css\";\nimport Title from \"./../../components/Title\";\nimport TextArea from \"./../../components/TextArea\";\nimport { helloWorldBot } from \"./../../libs/HelloWorld/helloWorldBot.js\";\nconst arrayLangs = [{\n  value: \"C\",\n  label: \"C\"\n}, {\n  value: \"C#\",\n  label: \"C#\"\n}, {\n  value: \"Brainfuck\",\n  label: \"Brainfuck\"\n}, {\n  value: \"C++\",\n  label: \"C++\"\n}, {\n  value: \"Clojure\",\n  label: \"Clojure\"\n}, {\n  value: \"Cobol\",\n  label: \"Cobol\"\n}, {\n  value: \"Elixir\",\n  label: \"Elixir\"\n}, {\n  value: \"Emojicode\",\n  label: \"Emojicode\"\n}, {\n  value: \"Erlang\",\n  label: \"Erlang\"\n}, {\n  value: \"Fortran\",\n  label: \"Fortran\"\n}, {\n  value: \"Go\",\n  label: \"Go\"\n}, {\n  value: \"Haskell\",\n  label: \"Haskell\"\n}, {\n  value: \"Html\",\n  label: \"Html\"\n}, {\n  value: \"Java\",\n  label: \"Java\"\n}, {\n  value: \"Javascript\",\n  label: \"Javascript\"\n}, {\n  value: \"Kotlin\",\n  label: \"Kotlin\"\n}, {\n  value: \"Objective-c\",\n  label: \"Objective-c\"\n}, {\n  value: \"Perl\",\n  label: \"Perl\"\n}, {\n  value: \"Php\",\n  label: \"Php\"\n}, {\n  value: \"Python\",\n  label: \"Python\"\n}, {\n  value: \"Python3\",\n  label: \"Python3\"\n}, {\n  value: \"R\",\n  label: \"R\"\n}, {\n  value: \"Ruby\",\n  label: \"Ruby\"\n}, {\n  value: \"Rust\",\n  label: \"Rust\"\n}, {\n  value: \"Scala\",\n  label: \"Scala\"\n}, {\n  value: \"Scheme\",\n  label: \"Scheme\"\n}, {\n  value: \"TypeScript\",\n  label: \"TypeScript\"\n}];\n\nconst HelloWorldPage = () => {\n  const _React$useState = React.useState(arrayLangs[0].value),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        selectedLang = _React$useState2[0],\n        changeSelectedLang = _React$useState2[1];\n\n  const handleChange = event => {\n    changeSelectedLang(event.target.value);\n  };\n\n  let val = helloWorldBot(selectedLang);\n  return React.createElement(\"div\", {\n    className: \"main-page\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(Title, {\n    titleText: \"Hello World\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: \"content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"page-description\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, \"Welcome to the hello world app, this app lets you select a programming language and then it will show you how to create a hello world for the application.\"), React.createElement(\"select\", {\n    onChange: handleChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, arrayLangs.map(obj => React.createElement(\"option\", {\n    key: obj.value,\n    value: obj.value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }, obj.value))), React.createElement(TextArea, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, val.map(value => React.createElement(\"div\", {\n    key: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, value)))));\n};\n\nexport default HelloWorldPage;","map":{"version":3,"sources":["C:\\Users\\Michael Vamvakas\\Desktop\\GIT\\HCIFinalProject\\src\\pages\\HelloWorldPage\\HelloWorld.jsx"],"names":["React","Title","TextArea","helloWorldBot","arrayLangs","value","label","HelloWorldPage","useState","selectedLang","changeSelectedLang","handleChange","event","target","val","map","obj"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport \"./HelloWorld.css\";\r\n\r\nimport Title from \"./../../components/Title\";\r\nimport TextArea from \"./../../components/TextArea\";\r\nimport { helloWorldBot } from \"./../../libs/HelloWorld/helloWorldBot.js\";\r\n\r\nconst arrayLangs = [\r\n  { value: \"C\", label: \"C\" },\r\n  { value: \"C#\", label: \"C#\" },\r\n  { value: \"Brainfuck\", label: \"Brainfuck\" },\r\n  { value: \"C++\", label: \"C++\" },\r\n  { value: \"Clojure\", label: \"Clojure\" },\r\n  { value: \"Cobol\", label: \"Cobol\" },\r\n  { value: \"Elixir\", label: \"Elixir\" },\r\n  { value: \"Emojicode\", label: \"Emojicode\" },\r\n  { value: \"Erlang\", label: \"Erlang\" },\r\n  { value: \"Fortran\", label: \"Fortran\" },\r\n  { value: \"Go\", label: \"Go\" },\r\n  { value: \"Haskell\", label: \"Haskell\" },\r\n  { value: \"Html\", label: \"Html\" },\r\n  { value: \"Java\", label: \"Java\" },\r\n  { value: \"Javascript\", label: \"Javascript\" },\r\n  { value: \"Kotlin\", label: \"Kotlin\" },\r\n  { value: \"Objective-c\", label: \"Objective-c\" },\r\n  { value: \"Perl\", label: \"Perl\" },\r\n  { value: \"Php\", label: \"Php\" },\r\n  { value: \"Python\", label: \"Python\" },\r\n  { value: \"Python3\", label: \"Python3\" },\r\n  { value: \"R\", label: \"R\" },\r\n  { value: \"Ruby\", label: \"Ruby\" },\r\n  { value: \"Rust\", label: \"Rust\" },\r\n  { value: \"Scala\", label: \"Scala\" },\r\n  { value: \"Scheme\", label: \"Scheme\" },\r\n  { value: \"TypeScript\", label: \"TypeScript\" }\r\n];\r\n\r\nconst HelloWorldPage = () => {\r\n  const [selectedLang, changeSelectedLang] = React.useState(\r\n    arrayLangs[0].value\r\n  );\r\n\r\n  const handleChange = event => {\r\n    changeSelectedLang(event.target.value);\r\n  };\r\n\r\n  let val = helloWorldBot(selectedLang);\r\n  return (\r\n    <div className=\"main-page\">\r\n      <Title titleText=\"Hello World\" />\r\n      <div className=\"content\">\r\n        <div className=\"page-description\">\r\n          Welcome to the hello world app, this app lets you select a programming\r\n          language and then it will show you how to create a hello world for the\r\n          application.\r\n        </div>\r\n        <select onChange={handleChange}>\r\n          {arrayLangs.map(obj => (\r\n            <option key={obj.value} value={obj.value}>\r\n              {obj.value}\r\n            </option>\r\n          ))}\r\n        </select>\r\n        <TextArea>\r\n          {val.map(value => (\r\n            <div key={value}>{value}</div>\r\n          ))}\r\n        </TextArea>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HelloWorldPage;\r\n"]},"metadata":{},"sourceType":"module"}